Folgende Regeln gelten bei der Arbeit am Code:
* Alles was hinzugefügt wird ist ordentlich zu dokumentieren und formatieren! 
* Alle Variablen und Funktionen sind grundsätzlich klein zu schreiben oder mit CamelCase
* Keine '_' für Funktionsnamen und Variablen, dass ist obsolete ;)
* Änderungen am Code von Anderen werden abgesprochen
* Klassen bestehen aus:
	* einer Header-Datei mit der Deklaration 
	* einer CPP-Datei mit der Implementierung
* Alle Parameter für Funktionen beginnen mit 'Param' um sie von Attributen/Variablen unterscheiden zu können
* Instanziere Objekte sind am Ende der Nutzung zu 'delete'n
* Doxygen-Dokumentation für Methoden/Klassen etc.
* Keine @Params oder @Return definieren, wenn keine vorhanden oder void

Folgende Regeln gelten bei der Arbeit mit Git:
* Nicht jeden Scheiß als commit nehmen, sondern nur größere Änderungen mit aussagekräfter Commit-Message
* Viele kleine Commit's bei Bedarf rebase'n um Sie zusammenzufassen

Aufgaben:
@Nico-X - Klasse für schicke Ausgabe der Subnetze und Übersicht
@tschmidtbhv - Eingabe der Anzahl von Subnetzen etc. und anlegen der Objekte in einem Vector
@splatterb0y - Speichern der Daten in einer sqlite3 Datenbank und laden 

Ziel:
Das Ding so rocken, das Herr Ciborra uns freiwillig von EBA freistellt. :D 

  
   /* cout << "     Das super Subnet-Tool" << endl;
    cout << "      ein tolles Programm" << endl;
    cout << "         Version 1.0" << endl << endl;
    
    cout << " Wieviele Subnetze möchten Sie anlegen?";
    
    int networkCount = 0;
    scanf ("%d",&networkCount);*/
    
    /*
        Fehleingaben-Handling?
    */
   /* vector<subnet> usedSubnets;
    for(int i = 0; i < networkCount; i++) {
        cout << "Subnetz " << (i+1) << ":" << endl;
        cout << "Name? ";
        string name = "";
        cin >> name;
        cout << "Beschreibung? ";
        string notice = "";
        cin >> notice;
        cout << "Größe? ";
        int networkSize = 0;
        scanf("%d",&networkSize);*/
        
        /*
         Viele tolle Berechnungen von Broadcast,
         Netzadresse, Start und Ende des Range.
         
         Dann objekt hinzufügen:
         usedSubnets.push_back(subnet(0,0,0,0,name,notice));
         */
    }
	
    /*
    ipaddress* schinken = new ipaddress(0, 1);
	cout << schinken->getString() << endl;
    cout << schinken->getLong() << endl;
    
	subnet* kaese = new subnet();
     
    delete kaese;
    delete schinken;
     */
    
    
    
    /* Benutzereingabe - Anzahl Netze
     PSEUDOCODE!
     vector<subnet> subnetze;
     for(int i = 0; i < anzahlNetze; i++) {
        cout << "Größe?" << endl;
        cout << "Name?" << endl;
        cout << "Notiz?" << endl;
        subnetzte.put_back(subnet(größe,name,notiz));
     }
    */
     
    // Array mit der Anzahl von Netzen erzeugen
    
    // Anzahl Clients je Subnetz 
    
    // Subnetze anzeigen
    // Subnetz hinzufügen
    // Hostnamen zu IP-Adresse ablegen (Auch eine Notiz dazu)
    // IP-Adresse anzeigen
    // IP-Adresse suchen
    // Beenden 
    
    /*
     @Nico-X, wäre das was für dich?
      
     !!!Klasse!!! für die Darstellung von IP-Listen und Subnetzen etc.
     
     Output->printSubnets(vector<subnet> paramSubnet) 
     und dann
     
     |   Bereich | Name |       Notiz    |
     -------------------------------------
     | 0-47      | ET   | Elektrotechnik |
     
     Output->printIPsInSubnet(subnet paramSubnet) ...
     Quasi subnet rein und dann schön in einer Tabelle ausgeben
     
     |       Ip        | Hostnamen   |    Notiz    |
     |-----------------|-------------|-------------|
     | 192.168.000.000 | Netzadresse | -  
     | 192.168.000.001 | Celsius     | Deine Mudda |
     | 192.168.000.002 | #########   | ########### | 
     ....
     | 192.168.000.47  | Broadcast   | ping -b :D  |
    */
    
    /*
     Optional anbindung an SQLite um Subnetz-Daten zu speichern und später wieder zu laden.
    */
    
    // 
    
    /*
    int choosenOne;
    
    do {
        printf("\n1 : Subnetz erstellen\n");
        printf("2 : IP einfügen\n");
        printf("3 : IP löschen\n");
        printf("9 : Ende\n");
        printf("Ihre Wahl : ");
        cin << choosenOne;
        if (choosenOne != 9) {
            selectedPoint(int choosenOne);
        } else {
            return;
        }
        
    } while (choosenOne != 9); */
